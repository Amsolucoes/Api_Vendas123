// <auto-generated />
using System;
using Api.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(MyContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Api.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(60) CHARACTER SET utf8mb4")
                        .HasMaxLength(60);

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2df52f68-a93d-42d2-af09-c54aa302222f"),
                            CreateAt = new DateTime(2023, 6, 28, 15, 34, 44, 80, DateTimeKind.Local).AddTicks(9554),
                            Email = "mfrinfo@mail.com",
                            Name = "Administrador",
                            UpdateAt = new DateTime(2023, 6, 28, 15, 34, 44, 82, DateTimeKind.Local).AddTicks(1867)
                        });
                });

            modelBuilder.Entity("Domain.Entities.BookEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("Domain.Entities.BookEntity", b =>
                {
                    b.OwnsOne("Domain.Entities.BookEntity+Specifications", "specifications", b1 =>
                        {
                            b1.Property<Guid>("BookEntityId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Author")
                                .HasColumnType("varchar(60) CHARACTER SET utf8mb4")
                                .HasMaxLength(60);

                            b1.Property<string>("Genres")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("Illustrator")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("OriginallyPublished")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("PageCount")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.HasKey("BookEntityId");

                            b1.ToTable("Book");

                            b1.WithOwner()
                                .HasForeignKey("BookEntityId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
